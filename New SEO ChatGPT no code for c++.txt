#include <iostream>
#include <curl/curl.h>
#include <rapidjson/document.h>
#include <rapidjson/writer.h>
#include <rapidjson/stringbuffer.h>

using namespace rapidjson;

int main() {
    CURL *curl;
    CURLcode res;
    std::string url = "https://api.openai.com/v1/completions";
    std::string prompt = R"raw(PLEASE NOTE you need to remove the brackets from the URL (linkedin URL shortening)
I would like you to audit content for me based on a URL I specify below. I would like you to audit content as if you were a Google Quality Rater following the rules set out by Google (which you can see here https://developers.google.com/search/blog/2022/12/google-raters-guidelines-e-e-a-t) in respect of E-E-A-T (experience, expertise, authority and trust) - I would also like you to consider YMYL (your money your life where applicable) and Google medic factors also depending on the content type and nature. I would like you to provide a content quality rating based on a scale of 1 to 10 where 10 is best and 0 is worst. You should take into consideration - how well the content is written, how well it aligns with Google's E-E-A-T guidelines for human quality raters, how well structured the content is, if it makes it clear what is on offer, is it gramatically correct and well written and does it fit the end users intent when comparing the main H1 tag to the body of the content. You should provide clear, actionable recommendations for any areas where the content has an issue as well as guidance to bolster expertise and trust where applicable. You should not self reference and should avoid making any assumptions, the content for you to audit can be found here:")raw";
    std::string api_key = "PUT-YOUR-API-KEY-HERE";
    std::string gpt_model = "text-davinci-003";
    double temperature = 0.7;
    int max_tokens = 1000;
    std::string model = gpt_model;
    std::string headers = "Authorization: Bearer " + api_key;

    curl_global_init(CURL_GLOBAL_DEFAULT);
    curl = curl_easy_init();

    if (curl) {
        Document json_payload;
        json_payload.SetObject();
        Value model_value(gpt_model.c_str(), json_payload.GetAllocator());
        Value prompt_value(prompt.c_str(), json_payload.GetAllocator());
        json_payload.AddMember("model", model_value, json_payload.GetAllocator());
        json_payload.AddMember("prompt", prompt_value, json_payload.GetAllocator());
        json_payload.AddMember("temperature", temperature, json_payload.GetAllocator());
        json_payload.AddMember("max_tokens", max_tokens, json_payload.GetAllocator());

        StringBuffer buffer;
        Writer<StringBuffer> writer(buffer);
        json_payload.Accept(writer);
        std::string json_str = buffer.GetString();

        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, json_str.c_str());
        curl_slist *list = NULL;
        list = curl_slist_append(list, "Content-Type: application/json");
        list = curl_slist_append(list, headers.c_str());
        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, list);

        std::string response;
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, [](char *data, size_t size, size_t nmemb, std::string *response) -> size_t {
            response->append(data, size * nmemb);
            return size * nmemb;
        });
        curl_easy_setopt(curl, CURLOPT_WRITED
